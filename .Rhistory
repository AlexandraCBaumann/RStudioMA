# read and plot example data
## PC: D:/Desktop/Masterarbeit/GitRepository/RStudioMA/allfemales_till02-2023.csv
## Laptop: C:/Users/pauls/Desktop/Masterarbeit/RStudioMA/allfemales_till02-2023.csv
data <- fread("D:/Desktop/Masterarbeit/GitRepository/RStudioMA/allfemales_till02-2023.csv")
# for data handling
library(data.table)
library(atlastools)
library(stringi)
# for recursion analysis
library(recurse)
# for plotting
library(ggplot2)
library(patchwork)
library(sp)
# making a colour palette
pal <- RColorBrewer::brewer.pal(5, "Set1")
pal[3] <- "seagreen"
data <- fread("D:/Desktop/Masterarbeit/GitRepository/RStudioMA/allfemales_till02-2023.csv")
data_raw <- copy(data)
str(data_raw)
sum(is.na(data_raw$Longitude))
sum(is.na(data_raw$Latitude))
na.omit(data_raw$Longitude)
is.numeric(data_raw$Longitude)
fig_data_raw <-
ggplot(data) +
geom_path(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 1, size = 0.2
) +
geom_point(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 0.2, size = 0.2
) +
ggthemes::theme_few() +
theme(
axis.title = element_blank(),
axis.text = element_blank()
) +
coord_sf(crs = 25832)
# save figure
ggsave(fig_data_raw,
filename = "D:/Desktop/Masterarbeit/GitRepository/RStudioMA/Plots/fig_calibration_raw.png",
width = 185 / 25
)
df.df <- spTransform( df.df, CRS("+init=epsg:4326")) # projected
fig_data_raw <-
ggplot(data) +
geom_path(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 1, size = 0.2
) +
geom_point(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 0.2, size = 0.2
) +
ggthemes::theme_few() +
theme(
axis.title = element_blank(),
axis.text = element_blank()
) +
coord_sf(crs = 4326)
# save figure
ggsave(fig_data_raw,
filename = "D:/Desktop/Masterarbeit/GitRepository/RStudioMA/Plots/fig_calibration_raw.png",
width = 185 / 25
)
data_unproc <- copy(data)
data <- atl_filter_bounds(
data = data,
Longitude = "x", Latitude = "y",
x_range = c(645000, max(data$x)),
remove_inside = FALSE
)
data <- atl_filter_bounds(
data = data,
data_raw$Longitude = "x", data_raw$Latitude = "y",
data <- atl_filter_bounds(
data = data,
data$Longitude = "x", data$Latitude = "y",
# remove inside must be set to falses
data <- atl_filter_bounds(
data = data,
data$Longitude = "x", data$Latitude = "y",
# remove inside must be set to falses
data <- atl_filter_bounds(
data = data,
x = "x", y = "y",
x_range = c(645000, max(data$Longitude)),
remove_inside = FALSE
)
data <- atl_filter_bounds(
data = data,
longitude = "x", latitude = "y",
x_range = c(645000, max(data$Longitude)),
remove_inside = FALSE
)
install.packages("sf")
install.packages("sf")
library(sf)
install.packages("rgdal")
library(rgdal)
str(data)
latitude <- data$Latitude
longitude <- data$Longitude
# Create a SpatialPoints object with the GPS coordinates
gps_coords <- SpatialPoints(matrix(c(longitude, latitude), ncol = 2), proj4string = CRS("+proj=longlat +datum=WGS84"))
library(sp)
# Create a SpatialPoints object with the GPS coordinates
gps_coords <- SpatialPoints(matrix(c(longitude, latitude), ncol = 2), proj4string = CRS("+proj=longlat +datum=WGS84"))
utm_proj <- CRS("+proj=utm +zone=32 +datum=WGS84")
# Perform the coordinate transformation
utm_coords <- spTransform(gps_coords, utm_proj)
# Extract UTM coordinates
utm_easting <- utm_coords@coords[, 1]
utm_northing <- utm_coords@coords[, 2]
# Create a new data frame with UTM coordinates
utm_data <- data.frame(Latitude = latitude, Longitude = longitude, UTM_Easting = utm_easting, UTM_Northing = utm_northing)
# Update the original data frame with UTM coordinates
data$UTM_Easting <- utm_easting
data$UTM_Northing <- utm_northing
# Create a new data frame with selected columns from the old file and UTM coordinates
new_data <- data.frame(
GMT_Time = data$GMT_Time,
Altitude = data$Altitude,
Duration = data$Duration,
Temperature = data$Temperature,
DOP = data$DOP,
Satellites = data$Satellites,
Cause_of_Fix = data$Cause_of_Fix,
ID = data$ID,
Voltage = data$Voltage,
DateTime = data$DateTime,
UTM_Easting = utm_easting,
UTM_Northing = utm_northing
)
# Add the UTM coordinates to the original data frame
data$UTM_Easting <- utm_easting
data$UTM_Northing <- utm_northing
# Select specific columns from the old file and UTM coordinates
selected_columns <- c("GMT Time", "Altitude", "Duration", "Temperature", "DOP", "Satellites", "Cause of Fix", "ID", "Voltage", "DateTime", "UTM_Easting", "UTM_Northing")
new_data <- data[selected_columns]
# Save the new data frame to a new CSV file
write.csv(new_data, "D:/Desktop/Masterarbeit/GitRepository/RStudioMA/updated_data_with_utm.csv", row.names = FALSE)
# Print a message
cat("UTM coordinates added to the same file: allfemales_till02-2023.csv\n")
fig_data_raw <-
ggplot(new_data) +
geom_path(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 1, size = 0.2
) +
geom_point(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 0.2, size = 0.2
) +
ggthemes::theme_few() +
theme(
axis.title = element_blank(),
axis.text = element_blank()
) +
coord_sf(crs = 25832)
fig_new_data <-
ggplot(data) +
geom_path(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 1, size = 0.2
) +
geom_point(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 0.2, size = 0.2
) +
ggthemes::theme_few() +
theme(
axis.title = element_blank(),
axis.text = element_blank()
) +
coord_sf(crs = 25832)
library(ggplot2)
fig_new_data <-
ggplot(data) +
geom_path(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 1, size = 0.2
) +
geom_point(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 0.2, size = 0.2
) +
ggthemes::theme_few() +
theme(
axis.title = element_blank(),
axis.text = element_blank()
) +
coord_sf(crs = 25832)
# save figure
ggsave(fig_data_raw,
filename = "D:/Desktop/Masterarbeit/GitRepository/RStudioMA/Plots/fig_calibration_raw.png",
width = 185 / 25
)
data_unproc <- copy(new_data)
fig_new_data <-
ggplot(new_data) +
geom_path(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 1, size = 0.2
) +
geom_point(aes(x = Longitude, y = Latitude),
col = "grey", alpha = 0.2, size = 0.2
) +
ggthemes::theme_few() +
theme(
axis.title = element_blank(),
axis.text = element_blank()
) +
coord_sf(crs = 25832)
# save figure
ggsave(fig_data_raw,
filename = "D:/Desktop/Masterarbeit/GitRepository/RStudioMA/Plots/fig_calibration_raw.png",
width = 185 / 25
)
data_unproc <- copy(new_data)
data_unproc <- new_data
View(data_unproc)
library(sf)
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
study_areas <- list(
list(name = "Oettingen", x_range = c(min_lon_1, max_lon_1)),
list(name = "Steingaden", x_range = c(min_lon_2, max_lon_2)),
)
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
gpkg_sf <- st_as_sf(gpkg_data)
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
min_coordinates <- list()
max_coordinates <- list()
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
min_coordinates[[i]] <- c(bbox["xmin"], bbox["ymin"])
max_coordinates[[i]] <- c(bbox["xmax"], bbox["ymax"])
}
for (i in 1:length(polygon_sf)) {
cat("Polygon", i, "Minimum:", min_coordinates[[i]], "Maximum:", max_coordinates[[i]], "\n")
}
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
gpkg_sf <- st_as_sf(gpkg_data)
# Filter polygons
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
# Initialize empty lists to store coordinates
overall_min <- c(Inf, Inf)
overall_max <- c(-Inf, -Inf)
# Loop through each polygon
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
overall_min <- pmin(overall_min, c(bbox["xmin"], bbox["ymin"]))
overall_max <- pmax(overall_max, c(bbox["xmax"], bbox["ymax"]))
}
# Print the overall minimum and maximum coordinates
cat("Overall Minimum:", overall_min, "\n")
cat("Overall Maximum:", overall_max, "\n")
install.packages("dplyr")
install.packages("knitr")
library(dplyr)
library(knitr)
kable(as.data.frame(gpkg_data))
View(polygon_sf)
View(gpkg_data)
View(gpkg_data[[1]][[1]])
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
kable(as.data.frame(gpkg_data))
gpkg_sf <- st_as_sf(gpkg_data)
# Filter polygons
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
# Initialize empty lists to store coordinates
polygon_coordinates <- list()
# Loop through each polygon
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$1,  # Replace with your polygon's identifier
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"1",  # Replace with your polygon's identifier
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
# Print the results for each polygon
for (i in 1:length(polygon_coordinates)) {
polygon_info <- polygon_coordinates[[i]]
cat("Polygon Name:", polygon_info$polygon_name, "\n")
cat("Minimum Coordinates:", polygon_info$min_coordinates, "\n")
cat("Maximum Coordinates:", polygon_info$max_coordinates, "\n")
cat("\n")
}
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"1",  # Replace with your polygon's identifier
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"name_column"2",  # Replace with the correct column name
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"1",  # Replace with your polygon's identifier
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"2",  # Replace with the correct column name
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
# Print the results for each polygon
for (i in 1:length(polygon_coordinates)) {
polygon_info <- polygon_coordinates[[i]]
cat("Polygon Name:", polygon_info$polygon_name, "\n")
cat("Minimum Coordinates:", polygon_info$min_coordinates, "\n")
cat("Maximum Coordinates:", polygon_info$max_coordinates, "\n")
cat("\n")
}
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"1",  # Replace with your polygon's identifier
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"2",  # Replace with the correct column name
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
# Print the results for each polygon
for (i in 1:length(polygon_coordinates)) {
polygon_info <- polygon_coordinates[[i]]
cat("Polygon Name:", polygon_info$Steingarden, "\n")
cat("Minimum Coordinates:", polygon_info$min_coordinates, "\n")
cat("Maximum Coordinates:", polygon_info$max_coordinates, "\n")
cat("\n")
}
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"1",  # Replace with your polygon's identifier
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$"2",  # Replace with the correct column name
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
# Print the results for each polygon
for (i in 1:length(polygon_coordinates)) {
polygon_info <- polygon_coordinates[[i]]
cat("Polygon Name:", polygon_info$"Steingarden", "\n")
cat("Minimum Coordinates:", polygon_info$min_coordinates, "\n")
cat("Maximum Coordinates:", polygon_info$max_coordinates, "\n")
cat("\n")
}
study_areas <- list(
list(name = "Oettingen", x_range = c(min_lon_1, max_lon_1)),
list(name = "Steingaden", x_range = c(min_lon_2, max_lon_2)),
)
study_areas <- list(
list(name = "Oettingen", x_range = c(590761.3, 646606)),
list(name = "Steingaden", x_range = c(5276998, 5468585)),
)
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
study_areas <- list(
list(name = "Oettingen", x_range = c(590761.3, 646606)),
list(name = "Steingaden", x_range = c(5276998, 5468585)),
)
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
kable(as.data.frame(gpkg_data))
gpkg_sf <- st_as_sf(gpkg_data)
# Filter polygons
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
# Initialize empty lists to store coordinates
bounding_boxes <- list()
# Loop through each polygon
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_name <- polygon_sf[i]$"1"  # Replace with your attribute name
bounding_boxes[[i]] <- list(
polygon_name = polygon_name,
x_range = c(bbox["1"], bbox["1"]),
y_range = c(bbox["2"], bbox["2"])
)
}
# Print the bounding box information for each polygon
for (i in 1:length(bounding_boxes)) {
bbox_info <- bounding_boxes[[i]]
cat("Polygon Name:", bbox_info$polygon_name, "\n")
cat("X Range:", bbox_info$x_range, "\n")
cat("Y Range:", bbox_info$y_range, "\n")
cat("\n")
}
View(polygon_sf)
View(polygon_sf[[1]][[1]])
View(polygon_sf)
View(polygon_sf[[1]][[1]])
gpkg_layers <- st_layers("path/to/your/file.gpkg")
gpkg_layers <- st_layers("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
# Filter polygons
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
# Initialize empty lists to store coordinates
bounding_boxes <- list()
# Loop through each polygon
for (layer_info in gpkg_layers) {
layer_name <- layer_info$name
# Read the layer
layer_data <- st_read("path/to/your/file.gpkg", layer = layer_name)
# Filter polygons (assuming they are stored as polygons)
polygon_sf <- layer_data[st_geometry_type(layer_data) == "POLYGON"]
# Loop through each polygon
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
bounding_boxes[[paste(layer_name, i, sep = "_")]] <- list(
x_range = c(bbox["xmin"], bbox["xmax"]),
y_range = c(bbox["ymin"], bbox["ymax"])
)
}
}
gpkg_layers <- st_layers("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
# Filter polygons
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
# Initialize empty lists to store coordinates
bounding_boxes <- list()
# Loop through each polygon
for (i in 1:nrow(gpkg_layers)) {
layer_name <- gpkg_layers$name[i]
# Read the layer
layer_data <- st_read("path/to/your/file.gpkg", layer = layer_name)
# Filter polygons (assuming they are stored as polygons)
polygon_sf <- layer_data[st_geometry_type(layer_data) == "POLYGON"]
# Loop through each polygon
for (j in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[j])
bounding_boxes[[paste(layer_name, j, sep = "_")]] <- list(
x_range = c(bbox["xmin"], bbox["xmax"]),
y_range = c(bbox["ymin"], bbox["ymax"])
)
}
}
gpkg_layers <- st_layers("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
# Filter polygons
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
# Initialize empty lists to store coordinates
bounding_boxes <- list()
# Loop through each polygon
for (i in 1:nrow(gpkg_layers)) {
layer_name <- gpkg_layers$name[i]
# Read the layer
layer_data <- st_read("path/to/your/file.gpkg", layer = main.Oettingen_Steingaden)
# Filter polygons (assuming they are stored as polygons)
polygon_sf <- layer_data[st_geometry_type(layer_data) == "POLYGON"]
# Loop through each polygon
for (j in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[j])
bounding_boxes[[paste(layer_name, j, sep = "_")]] <- list(
x_range = c(bbox["xmin"], bbox["xmax"]),
y_range = c(bbox["ymin"], bbox["ymax"])
)
}
}
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
gpkg_sf <- st_as_sf(gpkg_data)
# Filter polygons
polygon_sf <- gpkg_sf[st_geometry_type(gpkg_sf) == "POLYGON"]
# Initialize empty lists to store coordinates
polygon_coordinates <- list()
# Loop through each polygon
for (i in 1:length(polygon_sf)) {
bbox <- st_bbox(polygon_sf[i])
polygon_coordinates[[i]] <- list(
polygon_name = polygon_sf[i]$name_column,  # Replace with your polygon's identifier
min_coordinates = c(bbox["xmin"], bbox["ymin"]),
max_coordinates = c(bbox["xmax"], bbox["ymax"])
)
}
# Print the results for each polygon
for (i in 1:length(polygon_coordinates)) {
polygon_info <- polygon_coordinates[[i]]
cat("Polygon Name:", polygon_info$polygon_name, "\n")
cat("Minimum Coordinates:", polygon_info$min_coordinates, "\n")
cat("Maximum Coordinates:", polygon_info$max_coordinates, "\n")
cat("\n")
}
gpkg_data <- st_read("D:/Desktop/Masterarbeit/Studiengebiete/Polygone/Oettingen_Steingaden.gpkg")
study_areas <- list(
list(name = "Oettingen", x_range = c(590761.3, 646606)),
list(name = "Steingaden", x_range = c(5276998, 5468585)),
)
