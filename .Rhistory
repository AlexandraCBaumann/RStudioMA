YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
files <- list.files(input_folder, recursive=TRUE, pattern = "*by.laz")
for (dom_file in files) {
str_parts <- unlist(strsplit(las_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(las_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz')
writeLAS(lasnDOM, output_file)
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
files <- list.files(input_folder, recursive=TRUE, pattern = "*by.laz")
for (dom_file in files) {
str_parts <- unlist(strsplit(las_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(las_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz'))
writeLAS(lasnDOM, output_file)
}
str_parts <- unlist(strsplit(las_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(las_file)
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(las_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(las_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz'))
writeLAS(lasnDOM, output_file)
}
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, full_names=TRUE, recursive=TRUE, pattern = "*by.laz")
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(las_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(las_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz'))
writeLAS(lasnDOM, output_file)
}
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz'))
writeLAS(lasnDOM, output_file)
}
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
print(dom_files)
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz'))
writeLAS(lasnDOM, output_file)
}
lasDOM <- readLAS(dom_file)
print(dom_file)
F:\DOM\2022\122003\dom04_602_5424_1_by.laz
lasDOM <- readLAS(dom_file)
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = glue('F:/DGM/txt2las/{x}_{y}.laz')
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz'))
writeLAS(lasnDOM, output_file)
}
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
glue("f:/dgm/{x})
print()
print(glue("f:/dgm/{x}))
print(glue("f:/dgm/{x}"))
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- str_glue('F:/DOM/{YEAR}')
print( paste('F:/DGM/txt2las/', toString(x), toString(y), '.laz'))
print(
dgm_file = paste('F:/DGM/txt2las/', toString(x), toString(y), '.laz', sep = "",))
print(
dgm_file = paste('F:/DGM/txt2las/', toString(x), toString(y), '.laz', sep = ""))
print(dgm_file = paste('F:/DGM/txt2las/', toString(x), toString(y), '.laz', sep = ""))
print(paste('F:/DGM/txt2las/', toString(x), toString(y), '.laz', sep = ""))
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- glue('F:/DOM/{YEAR}')
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = paste('F:/DGM/txt2las/', paste(toString(x), toString(y), sep="_"), '.laz', sep = "",)
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, glue('{x}_{y}.laz'))
writeLAS(lasnDOM, output_file)
}
toString(glue('F:/DGM/txt2las/{x}_{y}.laz'))
dgm_file = toString(glue('F:/DGM/txt2las/{x}_{y}.laz'))
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- toString(glue('F:/DOM/{YEAR}'))
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = toString(glue('F:/DGM/txt2las/{x}_{y}.laz'))
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, toString(glue('{x}_{y}.laz')))
writeLAS(lasnDOM, output_file)
}
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
if (!file.exists(dgm_file)) {
print(glue("dgm file {dmg_file} does not exist."))
n
if (!file.exists(dgm_file)) {
print(glue("dgm file {dmg_file} does not exist."))
next
}
}
if (!file.exists(dgm_file)) {
print(glue("dgm file {dmg_file} does not exist."))
next
}
if (!file.exists(dgm_file)) {
print(glue("dgm file {dgm_file} does not exist."))
next
}
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- TRUE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- toString(glue('F:/DOM/{YEAR}'))
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = toString(glue('F:/DGM/txt2las/{x}_{y}.laz'))
if (!file.exists(dgm_file)) {
print(glue("dgm file {dgm_file} does not exist."))
next
}
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, toString(glue('{x}_{y}.laz')))
writeLAS(lasnDOM, output_file)
}
# Save File
output_directory <- "F:/nDOM_laz"
output_file <- file.path(output_directory, toString(glue('{x}_{y}.laz')))
writeLAS(lasnDOM, output_file)
}
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- FALSE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- toString(glue('F:/DOM/{YEAR}'))
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
# Find files and read them
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = toString(glue('F:/DGM/txt2las/{x}_{y}.laz'))
if (!file.exists(dgm_file)) {
print(glue("dgm file {dgm_file} does not exist."))
next
}
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
# Calculate nDOM
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
# Save File
output_file <- toString(glue("F:/nDOM_laz/{YEAR}/{x}_{y}.laz"))
writeLAS(lasnDOM, output_file)
# Plot and stop for checking on the result
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
print(glue("Writing {output_file}."))
}
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- FALSE
YEAR <- 2022
library(glue)
library(lidR)
library(RCSF)
input_folder <- toString(glue('F:/DOM/{YEAR}'))
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
# Find files and read them
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = toString(glue('F:/DGM/txt2las/{x}_{y}.laz'))
if (!file.exists(dgm_file)) {
print(glue("dgm file {dgm_file} does not exist."))
next
}
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
# Calculate nDOM
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
# Save File
output_file <- toString(glue("F:/nDOM_laz/{YEAR}/Steingaden/{x}_{y}.laz"))
writeLAS(lasnDOM, output_file)
# Plot and stop for checking on the result
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
print(glue("Writing {output_file}."))
}
#lasunnormalize(las)
#‪F:\DGM\txt2las\646_5278.laz
#F:\DOM\2022\122040\dom04_646_5278_1_by.laz
#install.packages ("lidR")
#install.packages("RCSF")
PLOT <- FALSE
YEAR <- 2021
library(glue)
library(lidR)
library(RCSF)
input_folder <- toString(glue('F:/DOM/{YEAR}'))
dom_files <- list.files(input_folder, full.names=TRUE, recursive=TRUE, pattern = "*by.laz")
for (dom_file in dom_files) {
# Find files and read them
str_parts <- unlist(strsplit(dom_file, split="_"))
x <- str_parts[2]
y <- str_parts[3]
dgm_file = toString(glue('F:/DGM/Oettingen/txt2las/{x}_{y}.laz'))
if (!file.exists(dgm_file)) {
print(glue("dgm file {dgm_file} does not exist."))
next
}
lasDOM <- readLAS(dom_file)
lasDGM <- readLAS(dgm_file)
# Calculate nDOM
ground = classify_ground(lasDGM, algorithm = csf())
dtm <- grid_terrain(ground, 1, knnidw(k = 8, p = 2))
#lasnDOM <- lasnormalize(lasDOM, dtm = dtm) # deprecated
lasnDOM <- normalize_height(lasDOM, dtm)
# Save File
output_file <- toString(glue("F:/nDOM_laz/Oettingen/{YEAR}/{x}_{y}.laz"))
writeLAS(lasnDOM, output_file)
# Plot and stop for checking on the result
if (PLOT) {
plot(lasDGM,  size = 10, bg = "white")
plot(lasDOM,  size = 10, bg = "white")
plot(lasnDOM, size = 10, bg = "white")
stop()
}
print(glue("Writing {output_file}."))
}
#lasunnormalize(las)
#‪F:\DGM\txt2las\646_5278.laz
#F:\DOM\2022\122040\dom04_646_5278_1_by.laz
install.packages ("lidR")
install.packages("RCSF")
citation()
version$version.string
citation("lidR")
print("lidR", bibtex=TRUE)
print(lidR, bibtex=TRUE)
toBibtex(.)
toBibtex(citation("lidR"))
toBibtex(citation("RCSF"))
